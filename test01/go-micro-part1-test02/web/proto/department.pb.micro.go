// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: department.proto

package go_svr_proto_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DepartmentService service

type DepartmentService interface {
	GetDeparments(ctx context.Context, in *GetDeparmentRequest, opts ...client.CallOption) (*GetDeparmentResponse, error)
}

type departmentService struct {
	c    client.Client
	name string
}

func NewDepartmentService(name string, c client.Client) DepartmentService {
	return &departmentService{
		c:    c,
		name: name,
	}
}

func (c *departmentService) GetDeparments(ctx context.Context, in *GetDeparmentRequest, opts ...client.CallOption) (*GetDeparmentResponse, error) {
	req := c.c.NewRequest(c.name, "DepartmentService.GetDeparments", in)
	out := new(GetDeparmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DepartmentService service

type DepartmentServiceHandler interface {
	GetDeparments(context.Context, *GetDeparmentRequest, *GetDeparmentResponse) error
}

func RegisterDepartmentServiceHandler(s server.Server, hdlr DepartmentServiceHandler, opts ...server.HandlerOption) error {
	type departmentService interface {
		GetDeparments(ctx context.Context, in *GetDeparmentRequest, out *GetDeparmentResponse) error
	}
	type DepartmentService struct {
		departmentService
	}
	h := &departmentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DepartmentService{h}, opts...))
}

type departmentServiceHandler struct {
	DepartmentServiceHandler
}

func (h *departmentServiceHandler) GetDeparments(ctx context.Context, in *GetDeparmentRequest, out *GetDeparmentResponse) error {
	return h.DepartmentServiceHandler.GetDeparments(ctx, in, out)
}
