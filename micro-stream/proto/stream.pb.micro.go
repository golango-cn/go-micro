// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: stream.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SteamService service

func NewSteamServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SteamService service

type SteamService interface {
	GetStream1(ctx context.Context, opts ...client.CallOption) (SteamService_GetStream1Service, error)
	GetStream2(ctx context.Context, in *StreamRequest, opts ...client.CallOption) (SteamService_GetStream2Service, error)
	GetStream3(ctx context.Context, opts ...client.CallOption) (SteamService_GetStream3Service, error)
}

type steamService struct {
	c    client.Client
	name string
}

func NewSteamService(name string, c client.Client) SteamService {
	return &steamService{
		c:    c,
		name: name,
	}
}

func (c *steamService) GetStream1(ctx context.Context, opts ...client.CallOption) (SteamService_GetStream1Service, error) {
	req := c.c.NewRequest(c.name, "SteamService.GetStream1", &StreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &steamServiceGetStream1{stream}, nil
}

type SteamService_GetStream1Service interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
}

type steamServiceGetStream1 struct {
	stream client.Stream
}

func (x *steamServiceGetStream1) Close() error {
	return x.stream.Close()
}

func (x *steamServiceGetStream1) Context() context.Context {
	return x.stream.Context()
}

func (x *steamServiceGetStream1) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *steamServiceGetStream1) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *steamServiceGetStream1) Send(m *StreamRequest) error {
	return x.stream.Send(m)
}

func (x *steamServiceGetStream1) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *steamService) GetStream2(ctx context.Context, in *StreamRequest, opts ...client.CallOption) (SteamService_GetStream2Service, error) {
	req := c.c.NewRequest(c.name, "SteamService.GetStream2", &StreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &steamServiceGetStream2{stream}, nil
}

type SteamService_GetStream2Service interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamResponse, error)
}

type steamServiceGetStream2 struct {
	stream client.Stream
}

func (x *steamServiceGetStream2) Close() error {
	return x.stream.Close()
}

func (x *steamServiceGetStream2) Context() context.Context {
	return x.stream.Context()
}

func (x *steamServiceGetStream2) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *steamServiceGetStream2) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *steamServiceGetStream2) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *steamService) GetStream3(ctx context.Context, opts ...client.CallOption) (SteamService_GetStream3Service, error) {
	req := c.c.NewRequest(c.name, "SteamService.GetStream3", &StreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &steamServiceGetStream3{stream}, nil
}

type SteamService_GetStream3Service interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamRequest) error
}

type steamServiceGetStream3 struct {
	stream client.Stream
}

func (x *steamServiceGetStream3) Close() error {
	return x.stream.Close()
}

func (x *steamServiceGetStream3) Context() context.Context {
	return x.stream.Context()
}

func (x *steamServiceGetStream3) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *steamServiceGetStream3) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *steamServiceGetStream3) Send(m *StreamRequest) error {
	return x.stream.Send(m)
}

// Server API for SteamService service

type SteamServiceHandler interface {
	GetStream1(context.Context, SteamService_GetStream1Stream) error
	GetStream2(context.Context, *StreamRequest, SteamService_GetStream2Stream) error
	GetStream3(context.Context, SteamService_GetStream3Stream) error
}

func RegisterSteamServiceHandler(s server.Server, hdlr SteamServiceHandler, opts ...server.HandlerOption) error {
	type steamService interface {
		GetStream1(ctx context.Context, stream server.Stream) error
		GetStream2(ctx context.Context, stream server.Stream) error
		GetStream3(ctx context.Context, stream server.Stream) error
	}
	type SteamService struct {
		steamService
	}
	h := &steamServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SteamService{h}, opts...))
}

type steamServiceHandler struct {
	SteamServiceHandler
}

func (h *steamServiceHandler) GetStream1(ctx context.Context, stream server.Stream) error {
	return h.SteamServiceHandler.GetStream1(ctx, &steamServiceGetStream1Stream{stream})
}

type SteamService_GetStream1Stream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
}

type steamServiceGetStream1Stream struct {
	stream server.Stream
}

func (x *steamServiceGetStream1Stream) Close() error {
	return x.stream.Close()
}

func (x *steamServiceGetStream1Stream) Context() context.Context {
	return x.stream.Context()
}

func (x *steamServiceGetStream1Stream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *steamServiceGetStream1Stream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *steamServiceGetStream1Stream) Send(m *StreamResponse) error {
	return x.stream.Send(m)
}

func (x *steamServiceGetStream1Stream) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *steamServiceHandler) GetStream2(ctx context.Context, stream server.Stream) error {
	m := new(StreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SteamServiceHandler.GetStream2(ctx, m, &steamServiceGetStream2Stream{stream})
}

type SteamService_GetStream2Stream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamResponse) error
}

type steamServiceGetStream2Stream struct {
	stream server.Stream
}

func (x *steamServiceGetStream2Stream) Close() error {
	return x.stream.Close()
}

func (x *steamServiceGetStream2Stream) Context() context.Context {
	return x.stream.Context()
}

func (x *steamServiceGetStream2Stream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *steamServiceGetStream2Stream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *steamServiceGetStream2Stream) Send(m *StreamResponse) error {
	return x.stream.Send(m)
}

func (h *steamServiceHandler) GetStream3(ctx context.Context, stream server.Stream) error {
	return h.SteamServiceHandler.GetStream3(ctx, &steamServiceGetStream3Stream{stream})
}

type SteamService_GetStream3Stream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamRequest, error)
}

type steamServiceGetStream3Stream struct {
	stream server.Stream
}

func (x *steamServiceGetStream3Stream) Close() error {
	return x.stream.Close()
}

func (x *steamServiceGetStream3Stream) Context() context.Context {
	return x.stream.Context()
}

func (x *steamServiceGetStream3Stream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *steamServiceGetStream3Stream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *steamServiceGetStream3Stream) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
